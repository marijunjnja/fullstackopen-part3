{"version":3,"sources":["components/Note.js","components/Notification.js","components/Footer.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","appliedClass","Footer","style","color","fontStyle","fontSize","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","toggleImportanceOf","find","n","changedNote","returnedNote","map","catch","error","setTimeout","key","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","length","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5237eb68.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important\r\n    ? 'make not important' : 'make important'\r\n\r\n  return (\r\n    <li className='note'>\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note","import React from 'react'\r\n\r\nconst Notification = ({ message, appliedClass }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className={appliedClass}>\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification","import React from 'react'\r\n\r\nconst Footer = () => {\r\n  const footerStyle = {\r\n    color: 'green',\r\n    fontStyle: 'italic',\r\n    fontSize: 16\r\n  }\r\n\r\n  return (\r\n    <div style={footerStyle}>\r\n      <br />\r\n      <em>Note app, Department of Computer Science, University of Helsinki 2019</em>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Footer","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  const nonExisting = {\r\n    id: 10000,\r\n    content: 'This note is not saved to server',\r\n    date: '2019-05-30T17:30:31.098Z',\r\n    important: true\r\n  }\r\n  return request.then(response => response.data.concat(nonExisting))\r\n}\r\n\r\nconst create = (newObject) => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\nimport noteService from './services/notes'\nimport './index.css'\n\nconst App = (props) => {\n  const [ notes, setNotes ] = useState([])\n  const [ newNote, setNewNote ] = useState('')\n  const [ showAll, setShowAll ] = useState(true)\n  const [ errorMessage, setErrorMessage ] = useState('some error happened...')\n\n  useEffect(() => {\n    noteService\n      .getAll()\n        .then(initialNotes => {\n          setNotes(initialNotes)\n        })\n  }, [])\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote)\n        .then(returnedNote => {\n          setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n        })\n        .catch(error => {\n          setErrorMessage(\n            `Note '${note.content}' was already removed from server`\n          )\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n          setNotes(notes.filter(n => n.id !== id))\n        })\n  }\n\n  const rows = () => notesToShow.map(note => \n    <Note \n      key={note.id}\n      note={note}\n      toggleImportance={() => toggleImportanceOf(note.id)}\n    />  \n  )\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1\n    }\n\n    noteService\n      .create(noteObject)\n        .then(returnedNote => {\n          setNotes(notes.concat(returnedNote))\n          setNewNote('')\n        })\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n\n      <Notification message={errorMessage} />\n\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {rows()}\n      </ul>\n      <form onSubmit={addNote}>\n        <input \n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}